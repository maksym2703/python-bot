import os
from datetime import datetime
from statistics import median

from dotenv import load_dotenv
from pybit.exceptions import FailedRequestError
from pybit.unified_trading import HTTP
from telegram import Update
from telegram.error import TelegramError
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ===================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====================
load_dotenv()

# Bybit
API_KEY = os.getenv("BYBIT_API_KEY", "").strip()
API_SECRET = os.getenv("BYBIT_API_SECRET", "").strip()
TESTNET = os.getenv("BYBIT_TESTNET", "true").strip().lower() == "true"

# Telegram
TG_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
TG_CHAT_ID_STR = os.getenv("TELEGRAM_CHAT_ID", "").strip()
TG_CHAT_ID = int(TG_CHAT_ID_STR) if TG_CHAT_ID_STR.isdigit() else None

# –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ / –∞–ª–µ—Ä—Ç–∏
SYMBOL = os.getenv("SYMBOL", "BTCUSDT").strip()
INTERVAL = os.getenv("INTERVAL", "1").strip()  # "1","3","5","15","60","240","D"
CANDLES_LIMIT = int(os.getenv("LIMIT", "200"))
EPS_PCT = float(os.getenv("EPS_PCT", "0.008"))  # 0.8% –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –ø—ñ–∫—ñ–≤
ALERT_PCT = float(os.getenv("ALERT_PCT", "0.002"))  # 0.2% –±–ª–∏–∑—å–∫—ñ—Å—Ç—å –¥–æ —Ä—ñ–≤–Ω—è
PING_SECONDS = int(os.getenv("PING_SECONDS", "60"))

if not TG_TOKEN or TG_CHAT_ID is None:
    raise RuntimeError("TELEGRAM_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ñ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –≤ .env")

# Bybit session: –≤–∞–∂–ª–∏–≤–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ testnet=TESTNET
session = HTTP(testnet=TESTNET, api_key=API_KEY, api_secret=API_SECRET)


# ===================== –•–µ–ª–ø–µ—Ä–∏ =====================
def fmt(n):
    try:
        return f"{float(n):,.4f}".replace(",", " ")
    except Exception:
        return str(n)


def fetch_klines(symbol: str, interval: str, limit: int):
    """
    Bybit V5 Spot kline: –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ (—Å–≤—ñ—á–æ–∫), –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ —á–∞—Å–æ–º.
    –ï–ª–µ–º–µ–Ω—Ç list: [start, open, high, low, close, volume, turnover]
    """
    r = session.get_kline(category="spot", symbol=symbol, interval=interval, limit=limit)
    raw = r["result"]["list"]
    kl = []
    for it in raw:
        ts, o, h, l, c, v, t = it
        kl.append({"ts": int(ts), "open": float(o), "high": float(h), "low": float(l), "close": float(c)})
    kl.sort(key=lambda x: x["ts"])
    return kl


def local_extrema(kl):
    """–ü—Ä–æ—Å—Ç—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –º—ñ–Ω—ñ/–º–∞–∫—Å—ñ –∑–∞ 3-—Å–≤—ñ—á–∫–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª–æ–º."""
    lows, highs = [], []
    for i in range(1, len(kl) - 1):
        if kl[i]["low"] <= kl[i - 1]["low"] and kl[i]["low"] <= kl[i + 1]["low"]:
            lows.append(kl[i]["low"])
        if kl[i]["high"] >= kl[i - 1]["high"] and kl[i]["high"] >= kl[i + 1]["high"]:
            highs.append(kl[i]["high"])
    return lows, highs


def cluster_levels(values, eps_pct: float):
    """–ì—Ä—É–ø—É—î –±–ª–∏–∑—å–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (¬±eps_pct) —É –∫–ª–∞—Å—Ç–µ—Ä–∏. –ü–æ–≤–µ—Ä—Ç–∞—î [(–º–µ–¥—ñ–∞–Ω–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å), ...] –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º —á–∞—Å—Ç–æ—Ç–∏."""
    if not values:
        return []
    values = sorted(values)
    clusters = [[values[0]]]
    for x in values[1:]:
        ref = clusters[-1][-1]
        if abs(x - ref) / ref <= eps_pct:
            clusters[-1].append(x)
        else:
            clusters.append([x])
    res = [(median(g), len(g)) for g in clusters]
    res.sort(key=lambda e: e[1], reverse=True)
    return res


def find_peak_levels(symbol: str, interval: str, limit: int, eps_pct: float):
    """–ü–æ–≤–µ—Ä—Ç–∞—î (top_min, top_max, last_close). top_* = (price, count)."""
    kl = fetch_klines(symbol, interval, limit)
    lows, highs = local_extrema(kl)
    low_clusters = cluster_levels(lows, eps_pct)
    high_clusters = cluster_levels(highs, eps_pct)
    best_min = low_clusters[0] if low_clusters else (None, 0)
    best_max = high_clusters[0] if high_clusters else (None, 0)
    last_close = kl[-1]["close"] if kl else None
    return best_min, best_max, last_close


def get_usdt_balance():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î float (–±–∞–ª–∞–Ω—Å) –∞–±–æ None, —è–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞ (401 / IP whitelist / –ø—Ä–∞–≤–∞).
    """
    try:
        r = session.get_wallet_balance(accountType="UNIFIED")
        coins = r["result"]["list"][0]["coin"]
        usdt = next((c for c in coins if c["coin"] == "USDT"), None)
        return float(usdt["walletBalance"]) if usdt else 0.0
    except FailedRequestError:
        return None
    except Exception:
        return None


# ===================== Telegram-–∫–æ–º–∞–Ω–¥–∏ =====================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/now ‚Äî —Ü—ñ–Ω–∞ + –ø—ñ–∫–∏ –∑–∞—Ä–∞–∑\n"
        "/peaks ‚Äî —Ç–æ–ø–æ–≤—ñ –º—ñ–Ω/–º–∞–∫—Å\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å USDT\n"
    )
    await update.message.reply_text(text)


async def cmd_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    min_level, max_level, price = find_peak_levels(SYMBOL, INTERVAL, CANDLES_LIMIT, EPS_PCT)
    text = (
        f"‚è± {datetime.now():%Y-%m-%d %H:%M:%S}\n"
        f"üìä {SYMBOL} {INTERVAL}m\n"
        f"‚Ä¢ –¶—ñ–Ω–∞: {fmt(price)}\n"
        f"‚Ä¢ –ú—ñ–Ω:  {fmt(min_level[0])} (x{min_level[1]})\n"
        f"‚Ä¢ –ú–∞–∫—Å: {fmt(max_level[0])} (x{max_level[1]})"
    )
    await update.message.reply_text(text)


async def cmd_peaks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    min_level, max_level, _ = find_peak_levels(SYMBOL, INTERVAL, CANDLES_LIMIT, EPS_PCT)
    await update.message.reply_text(
        f"üìà –ü—ñ–∫–∏ (–∫–ª–∞—Å—Ç–µ—Ä {EPS_PCT * 100:.1f}%):\n"
        f"‚Ä¢ –ú—ñ–Ω:  {fmt(min_level[0])} (x{min_level[1]})\n"
        f"‚Ä¢ –ú–∞–∫—Å: {fmt(max_level[0])} (x{max_level[1]})"
    )


async def cmd_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    usdt = get_usdt_balance()
    if usdt is None:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: –ø–µ—Ä–µ–≤—ñ—Ä –∫–ª—é—á—ñ/–ø—Ä–∞–≤–∞/IP —ñ BYBIT_TESTNET —É .env")
    else:
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {fmt(usdt)}")


# ===================== Anti-duplicate –¥–ª—è –∞–ª–µ—Ä—Ç—ñ–≤ =====================
_last_alert_signature = None  # (min_price, min_cnt, max_price, max_cnt, usdt)


# ===================== –§–æ–Ω–æ–≤–∏–π –∞–ª–µ—Ä—Ç =====================
async def alert_job(context: ContextTypes.DEFAULT_TYPE):
    global _last_alert_signature
    try:
        min_level, max_level, price = find_peak_levels(SYMBOL, INTERVAL, CANDLES_LIMIT, EPS_PCT)
        usdt = get_usdt_balance()

        signature = (
            round(min_level[0] or 0, 2), int(min_level[1] or 0),
            round(max_level[0] or 0, 2), int(max_level[1] or 0),
            round(usdt or 0, 2)
        )
        if signature == _last_alert_signature:
            return  # –Ω–µ –¥—É–±–ª—é—î–º–æ —Ç–µ —Å–∞–º–µ

        near_min = price and min_level[0] and abs(price - min_level[0]) / min_level[0] <= ALERT_PCT
        near_max = price and max_level[0] and abs(price - max_level[0]) / max_level[0] <= ALERT_PCT
        flags = []
        if near_min: flags.append("üî• –±—ñ–ª—è –ú–Ü–ù")
        if near_max: flags.append("‚ùÑÔ∏è –±—ñ–ª—è –ú–ê–ö–°")
        flag_txt = (" | " + " & ".join(flags)) if flags else ""

        lines = [
            f"üìä {SYMBOL} {INTERVAL}m ‚Äî –ø—ñ–∫–∏ (–∫–ª–∞—Å—Ç–µ—Ä {EPS_PCT * 100:.1f}%) {flag_txt}",
            f"‚Ä¢ –ú—ñ–Ω: {fmt(min_level[0])} (x{min_level[1]})",
            f"‚Ä¢ –ú–∞–∫—Å: {fmt(max_level[0])} (x{max_level[1]})",
        ]
        if usdt is not None:
            lines.append(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {fmt(usdt)}")
        else:
            lines.append("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: –ø–µ—Ä–µ–≤—ñ—Ä –∫–ª—é—á—ñ Testnet/Live, –ø—Ä–∞–≤–∞ Read, IP whitelist")

        await context.bot.send_message(chat_id=TG_CHAT_ID, text="\n".join(lines))
        _last_alert_signature = signature

    except Exception as e:
        if TG_CHAT_ID:
            await context.bot.send_message(chat_id=TG_CHAT_ID, text=f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–ª–µ—Ä—Ç—É: {e}")


# ===================== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ =====================
async def on_error(update, context: ContextTypes.DEFAULT_TYPE):
    try:
        raise context.error
    except TelegramError as e:
        if TG_CHAT_ID:
            await context.bot.send_message(chat_id=TG_CHAT_ID, text=f"‚ö†Ô∏è Telegram error: {e}")
    except Exception as e:
        if TG_CHAT_ID:
            await context.bot.send_message(chat_id=TG_CHAT_ID, text=f"‚ö†Ô∏è Error: {e}")


# ===================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è =====================
async def on_startup(app):
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ webhook, —â–æ–± –Ω–µ –±—É–ª–æ 409 Conflict
    await app.bot.delete_webhook(drop_pending_updates=True)
    # –æ–¥–Ω–∞ (!) job –¥–ª—è –∞–ª–µ—Ä—Ç—ñ–≤
    app.job_queue.run_repeating(alert_job, interval=PING_SECONDS, first=5)


def main():
    app = (
        ApplicationBuilder()
        .token(TG_TOKEN)
        .post_init(on_startup)
        .build()
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("now", cmd_now))
    app.add_handler(CommandHandler("peaks", cmd_peaks))
    app.add_handler(CommandHandler("balance", cmd_balance))
    app.add_error_handler(on_error)

    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
